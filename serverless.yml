service: equipment-rest

frameworkVersion: '3'

useDotenv: true

	
plugins:
  - serverless-add-api-key

custom:
  tableName: 'equipment-details'  	
  apiKeys:
    - name: equipment-api-key-developer
    - name: equipment-api-key-apps
  
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  stage: dev
  region: us-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["EquipmentsDynamoDBTable", "Arn" ] }
  environment:
    EQUIPMENTS_TABLE: ${self:custom.tableName}
functions:
  getEquipment:
    handler: server.handler
    events: # events trigger lambda functions
      - http: # this is an API Gateway HTTP event trigger
          path: /
          method: ANY
          cors: true
          private: true

      - http: # all routes get proxied to the Express router
          path: /{proxy+}
          method: ANY
          private: true
          cors: true
resources:
  Resources:
    EquipmentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: equipmentNumber
            AttributeType: S                                   
        KeySchema:
          -
            AttributeName: equipmentNumber
            KeyType: HASH                                            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
